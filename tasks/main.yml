---
# tasks file for unbound
- name: update apt cache
  apt:
    update_cache: yes
  when: ansible_os_family == 'Debian'

- name: install requirements
  package:
    name: "{{ unbound_requirements }}"
    state: present
  register: unbound_install_requirements
  until: unbound_install_requirements is succeeded
  retries: 3

- name: download archive
  unarchive:
    src: "https://nlnetlabs.nl/downloads/unbound/unbound-{{ unbound_version }}.tar.gz"
    dest: "{{ unbound_temporary_directory }}"
    list_files: yes
    remote_src: yes
    creates: "{{ unbound_temporary_directory }}/unbound-{{ unbound_version }}"
  register: unbound_download_archive
  until: unbound_download_archive is succeeded
  retries: 3
  notify:
    - configure
    - make
    - make install
    - install service

- name: make group unbound
  group:
    name: unbound
    system: yes

- name: make user unbound
  user:
    name: unbound
    group: unbound
    system: yes
  changed_when: false

- name: flush handlers
  meta: flush_handlers

- name: run unbound-control-setup
  shell: |
    set -o pipefail
    /usr/local/sbin/unbound-control-setup
  args:
    executable: /bin/bash
  register: control_key_setup
  check_mode: no
  changed_when: false

- name: run unbound-anchor
  shell: |
    set -o pipefail
    /usr/local/sbin/unbound-anchor -v
  environment:
    LD_LIBRARY_PATH: /usr/local/lib
  args:
    executable: /bin/bash
  register: trust_anchors_setup
  check_mode: no
  changed_when: false
  failed_when: trust_anchors_setup.rc != 1 and trust_anchors_setup.rc != 0

- name: download root hints
  shell: |
    set -o pipefail
    wget http://www.internic.net/domain/named.root -O /usr/local/etc/unbound/named.root
  args:
    executable: /bin/bash
  check_mode: no
  changed_when: false

- name: replace values in service file
  replace:
    path: /etc/systemd/system/unbound.service
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace | default(omit) }}"
  loop:
    - regexp: "@UNBOUND_SBIN_DIR@"
      replace: /usr/local/sbin
    - regexp: "@UNBOUND_RUN_DIR@"
    - regexp: "@UNBOUND_CHROOT_DIR@"
    - regexp: "@UNBOUND_PIDFILE@"
  changed_when: false
  notify:
    - systemctl daemon-reload

- name: comment lines in service file
  replace:
    path: /etc/systemd/system/unbound.service
    regexp: "^({{ item }}.*)"
    replace: '#\1'
  changed_when: false
  loop:
    - CapabilityBoundingSet
    - ProtectSystem
    - SystemCallFilter

- name: configure unbound
  template:
    src: unbound.conf.j2
    dest: /usr/local/etc/unbound/unbound.conf
    validate: /usr/local/sbin/unbound-checkconf %s
  notify:
    - restart unbound

- name: flush handlers
  meta: flush_handlers

- name: Populate service facts
  shell: |
    set -o pipefail
    systemctl list-unit-files --no-pager --type service --all | grep -E 'systemd-resolved|^UNIT'
  args:
    executable: /bin/bash
  check_mode: no
  changed_when: false
  register: systemd_resolved_status

- name: disable systemd-resolved
  include: systemd-resolved.yml
  when: (disable_systemd_resolved|bool is sameas true) and ('enabled' in systemd_resolved_status.stdout)

- name: start and enable unbound
  systemd:
    name: unbound
    state: started
    enabled: yes
    daemon_reload: yes
